name: CI Coverage for PR

on:
  pull_request_target:
    types:
      - opened
      - synchronize

jobs:
  coverage:
    env:
      PY_VER: ''
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install -y gdb-multiarch python3-dev python3-pip python3-wheel python3-setuptools git cmake gcc g++ pkg-config libglib2.0-dev gdbserver qemu-user curl
        sudo python3 -m pip install --upgrade pip --quiet
    - name: Run test coverage
      id: get_coverage
      env:
        ALLOWED_MARGIN: 0.01
        MIN_COVERAGE: 70
      run: |
        echo PY_VER=`gdb -q -nx -ex "pi print('.'.join(map(str, sys.version_info[:2])))" -ex quit` >> $GITHUB_ENV
        echo GEF_CI_NB_CPU=`grep -c ^processor /proc/cpuinfo` >> $GITHUB_ENV
        echo GEF_CI_ARCH=`uname --processor` >> $GITHUB_ENV
        python${{ env.PY_VER }} -m pip install --user --upgrade -r tests/requirements.txt --quiet
        current_score=$(curl --silent https://hugsy.github.io/gef/coverage/gef_py.html | grep pc_cov | sed 's?.*<span class="pc_cov">\([^%]*\)%</span>?\1?g')
        bash scripts/generate-coverage-docs.sh
        new_score=$(cat docs/coverage/gef_py.html | grep pc_cov | sed 's?.*<span class="pc_cov">\([^%]*\)%</span>?\1?g')
        score_diff=$(python -c "print(${new_score} - ${current_score})")
        echo "new_score=${new_score}" >> $GITHUB_OUTPUT
        echo "current_score=${current_score}" >> $GITHUB_OUTPUT
        echo "score_diff=${score_diff}" >> $GITHUB_OUTPUT

    - name: Post comment
      uses: actions/github-script@v7
      env:
        COMMIT:
      with:
        script: |
          const old_score   = ${{ steps.get_coverage.outputs.current_score }};
          const new_score   = ${{ steps.get_coverage.outputs.new_score }};
          const score_diff  = ${{ steps.get_coverage.outputs.score_diff }};
          const comment = `## ðŸ¤– Coverage update for ${{ github.event.pull_request.head.sha }}

            * Diff Commit: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
            * Current vs New Coverage Score: ${old_score}% / ${new_score}%
            * Difference: ${score_diff} ${(score_diff >= 0) ? "ðŸŸ¢" : "ðŸ”´"}
          `;

          try {
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({ owner, repo, issue_number: number, body: comment });

            if(docs_changes > 0) {
              await github.rest.issues.addLabels({
                owner: owner,
                repo: repo,
                issue_number: number,
                labels: ['documentation']
              });
            }

            if(tests_changes > 0) {
              await github.rest.issues.addLabels({
                owner: owner,
                repo: repo,
                issue_number: number,
                labels: ['automation/ci']
              });
            }
          } catch (err) { console.log(err); }
